name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: fs-indexer

jobs:
  # Lint and validate code
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint

      - name: Run Black
        run: black --check indexer/ api/

      #- name: Run isort
      #  run: isort --check-only indexer/ api/

      - name: Run Flake8
        run: flake8 indexer/ api/ --max-line-length=120 --extend-ignore=E203,W503,E402

      - name: Run Pylint
        run: |
          pylint indexer/*.py api/*.py --disable=C0111,R0903 || true

      - name: Validate Docker Compose
        run: |
          docker compose config -q
          docker compose -f docker-compose.test.yml config -q

      - name: Validate Dockerfiles
        run: |
          docker run --rm -i hadolint/hadolint < indexer/Dockerfile
          docker run --rm -i hadolint/hadolint < api/Dockerfile
          docker run --rm -i hadolint/hadolint < web/Dockerfile

  # Unit tests for Python components
  test-python:
    name: Test Python Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [indexer, api]
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.component }}-${{ matrix.python-version }}-${{ hashFiles(format('{0}/requirements*.txt', matrix.component)) }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.component }}-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements-test.txt

      - name: Run unit tests
        run: |
          cd ${{ matrix.component }}
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=term

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./${{ matrix.component }}/coverage.xml
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-${{ matrix.python-version }}

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-python]
    strategy:
      matrix:
        component: [indexer, api, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.component }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.component }}-
            ${{ runner.os }}-buildx-

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile
          push: false
          tags: |
            local/${{ env.IMAGE_NAME }}-${{ matrix.component }}:test
            local/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker,dest=/tmp/${{ matrix.component }}.tar

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-${{ matrix.component }}
          path: /tmp/${{ matrix.component }}.tar
          retention-days: 1

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: docker-*
          path: /tmp/images

      - name: Load Docker images
        run: |
          for component in indexer api web; do
            docker load --input /tmp/images/docker-${component}/${component}.tar
          done
          docker images

      - name: Set up test environment
        run: |
          # Create test directories and files
          mkdir -p tests/integration/test_data/sample_files
          echo "test content" > tests/integration/test_data/sample_files/test.txt
          echo "pdf content" > tests/integration/test_data/sample_files/document.pdf
          echo "source code" > tests/integration/test_data/sample_files/code.py
          
          # Create test config
          cp .env.example .env.test
          echo "HOST_PATH=$(pwd)/tests/integration/test_data" >> .env.test
          echo "MANTICORE_DATA_PATH=/tmp/manticore_test" >> .env.test
          
          # Create Manticore data directory
          mkdir -p /tmp/manticore_test

      - name: Start services
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 10
          docker compose -f docker-compose.test.yml ps
          docker compose -f docker-compose.test.yml logs

      - name: Run integration tests
        run: |
          # Wait for services to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:9308/cli?cmd=SHOW%20TABLES; do sleep 2; done'
          timeout 60 bash -c 'until curl -sf http://localhost:8080/health; do sleep 2; done'
          
          # Run indexer
          docker compose -f docker-compose.test.yml run --rm indexer
          
          # Test search API
          curl -sf http://localhost:8080/search?q=test | jq .
          curl -sf http://localhost:8080/stats | jq .
          
          # Run Python integration tests
          pip install pytest requests
          pytest tests/integration/test_integration.py -v

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.test.yml logs
          docker compose -f docker-compose.test.yml down

      - name: Clean up
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v
          rm -rf /tmp/manticore_test

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        component: [indexer, api, web]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.component }}
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/${{ matrix.component }}.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: local/${{ env.IMAGE_NAME }}-${{ matrix.component }}:test
          format: 'sarif'
          output: 'trivy-results-${{ matrix.component }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.component }}.sarif'
          category: 'trivy-${{ matrix.component }}'

  # End-to-end tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: docker-*
          path: /tmp/images

      - name: Load Docker images
        run: |
          for component in indexer api web; do
            docker load --input /tmp/images/docker-${component}/${component}.tar
          done

      - name: Set up test environment
        run: |
          # Create larger test dataset
          mkdir -p tests/e2e/test_data/{docs,code,media}
          for i in {1..100}; do
            echo "Document $i" > tests/e2e/test_data/docs/doc$i.txt
            echo "Code $i" > tests/e2e/test_data/code/script$i.py
            echo "Media $i" > tests/e2e/test_data/media/image$i.jpg
          done
          
          cp .env.example .env.e2e
          echo "HOST_PATH=$(pwd)/tests/e2e/test_data" >> .env.e2e
          echo "MANTICORE_DATA_PATH=/tmp/manticore_e2e" >> .env.e2e
          mkdir -p /tmp/manticore_e2e

      - name: Start full stack
        run: |
          docker compose --env-file .env.e2e -f docker-compose.test.yml up -d
          sleep 15

      - name: Run E2E tests
        run: |
          chmod +x tests/e2e/test_e2e.sh
          ./tests/e2e/test_e2e.sh

      - name: Clean up
        if: always()
        run: |
          docker compose -f docker-compose.test.yml down -v
          rm -rf /tmp/manticore_e2e tests/e2e/test_data
